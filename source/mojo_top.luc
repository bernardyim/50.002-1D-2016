module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  sig result [24]; // result of our operations
  sig alufn [8];
  sig a [8];
  sig b [8];
  sig xb[8];
  var overflow;
  var n;
  var z;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    alufn = io_dip[2]; // link left input array to alufn
    a = io_dip[1]; // link middle input array to a
    b = io_dip[0]; // link right input array to b
    result = 24h00; // initialise result to 0
    overflow = 0;  // initialise overflow to 0
    xb = 8h00;     // initialise xb to 0
    n = 0;         //initialise negative results bit for adder/subtractor
    z = 0;         //initialise results == 0 bit for adder/subtractor

    
    
    //adding and subtracting via the schematics of lab3
    if (alufn[5:1] ==5h0){
      xb = (b ^ 8x{alufn[0]});
      result[7:0] = (a + xb + alufn[0]);
      overflow = (a[7]&xb[7]&~result[7])|(~a[7]&~xb[7]&result[7]);
      n = result[7];
      z = result[7:0] == 8h00;
    }
    
    
    if (alufn[5-:6] == 6h18) // boolean and
      result[7:0] = a & b;
    if (alufn[5-:6] == 6h1e) // boolean or
      result[7:0] = a | b;
    if (alufn[5-:6] == 6h16) // boolean xor
      result[7:0] = a ^ b;
    if (alufn[5-:6] == 6h1a) // a
      result[7:0] = a;
    if (alufn[5-:6] == 6h20) // shl
      result[7:0] = a << b;
    if (alufn[5-:6] == 6h21) // shr
      result[7:0] = a >> b;
    if (alufn[5-:6] == 6h23) // sra
      result[7:0] = $signed(a) >>> b;
    if (alufn[5-:6] == 6h33) // cmpeq
      result[7:0] = a == b;
    if (alufn[5-:6] == 6h35) // cmplt
      result[7:0] = a < b;
    if (alufn[5-:6] == 6h37) // cmple
      result[7:0] = a <= b;
    
    if (alufn[5-:6] == 6h12) // multiply unsigned
      result[7:0] = a * b;
    
    if (alufn[5-:6] == 6h13){  // divide unsigned
         if (b == 0) io_led[1][7] = 1;
         else result[7:0] = a/b;
    }
      
    if (alufn[5-:6] == 6h14) // modulo unsigned
        result[7:0] = a - (a/b)*b;
      
    if (alufn[5-:6] == 6h1b) // b
      result[7:0] = b;
    
    if (alufn[5-:6] == 6h36) // cmpgt
      result[7:0] = a > b;
    if (alufn[5-:6] == 6h38) // cmpge
      result[7:0] = a >= b;
      
   
    
    if (alufn[5-:6] == 6h02) {// add (unsigned)
      result = a + b;
      if (result > 24hff) overflow = 1;
    }
    
    if (alufn[5-:6] == 6h03){ // subtract (unsigned)
      result = a - b;
      if (result > 24h00ff) overflow = 1;
    }
    
    
    io_led[1][0] = overflow; //set overflow led
    io_led[1][1] = z;        //set add/subtract results in 0 led
    io_led[1][2] = n;        //set add/subtract results in negative led

    if (a == b) // equal
       io_led[1][3] = 1;
    
    
    //TODO:
    //self-test
    
    io_led[0] = result[7:0];
    

}
}
