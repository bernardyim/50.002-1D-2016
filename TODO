module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  sig result [24]; // result of our operations
  sig alufn [8];
  sig a [8];
  sig b [8];
  var i;
  sig register [8];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    alufn = io_dip[2]; // link left input array to alufn
    a = io_dip[1]; // link middle input array to a
    b = io_dip[0]; // link right input array to b
    result = 24h00; // initialise result to 0
    
    if (alufn[5-:6] == 6h00) // add
      result = a + b;
    if (alufn[5-:6] == 6h01) // subtract
      result = a - b;
    if (alufn[5-:6] == 6h18) // boolean and
      result = a & b;
    if (alufn[5-:6] == 6h1e) // boolean or
      result = a | b;
    if (alufn[5-:6] == 6h16) // boolean xor
      result = a ^ b;
    if (alufn[5-:6] == 6h1a) // a
      result = a;
    if (alufn[5-:6] == 6h20) // shl
      result = a << b;
    if (alufn[5-:6] == 6h21) // shr
      result = a >> b;
    if (alufn[5-:6] == 6h23) // sra
      result = $signed(a) >>> b;
    if (alufn[5-:6] == 6h33) // cmpeq
      result = a == b;
    if (alufn[5-:6] == 6h35) // cmplt
      result = a < b;
    if (alufn[5-:6] == 6h37) // cmple
      result = a <= b;
      
    //additional functionality
    if (alufn[5-:6] == 6h02) // multiply
      result = a * b;
    if (alufn[5-:6] == 6h03) { // divide
      register = a;
      for (i = 7; i >= 0; i--) {
        if (register[7:i] >= b) {
          register[7:i] = a[7:i] - b;
          a[7:i] = register[7:i];
          result[i] = 1;
        } else {
          result[i] = 0;
        }
      }
    }
/*    if (alufn[5-:6] == 6h04) { // modulo
      register.d = a;
      for (i = 7; i >= 0; i--) {
        if (register.q[7:i] >= b) {
          register.d[7:i] = register.q[7:i] - b;
        }
      }
      result = register.q;
    }   */
    if (alufn[5-:6] == 6h1b) // b
      result = b;
    if (alufn[5-:6] == 6h36) // cmpgt
      result = a > b;
    if (alufn[5-:6] == 6h38) // cmpge
      result = a >= b;
      
    if (result > 8hff) // overflow
      io_led[1][0] = 1;
    if (a == b) // equal
      io_led[1][1] = 1;
    //TODO:
    //self-test
    
    io_led[0] = result[7-:8];
    
    
  }
}
