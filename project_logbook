Project log:
Project is counted in Days, with each meeting considered as a Day.

General chronological log:
Day 0:
-Downloaded and installed ISE and Mojo IDE on team's workstations
-Read through the first FPGA program tutorial

Day 1:
-Go through the following tutorials together as a team:
--first FPGA program together
--Synchronous logic
--IO shield
-Explore and understand the syntax of MOJO and Lucid

Day 2:
-Coded ALU bare-minimum as required for ALU Functionality
-Decided to include following functionality: Greater than / greater-equals, divide, modulo, multiply, output "b", with our own alufn code.
-Encountered issues with division- no such operation exists in the mojo documentation
-Decided to implement division with binary numbers based off advice in http://electronics.stackexchange.com/questions/155899/implementing-integer-division-in-hardware
-implemented modulo with the same structure as divide, except using the undivisible remainder of a as the result to be printed.
-Discovered that "/" is indeed the divisor operation in mojo

Design considerations:
Considering how the ALU is 8-bit, we decided to keep the output of the ALU as 8-bits as well, and utilise the remaining LED arrays for the following purposes:
-Overflowed output 
-a == b
-Error-checking and diagnosis for testing

We also decided to map io_dip[0] as the array "alufn", io_dip[1] as "a", and io_dip[2] as "b", in a bid to make the code more readable. 

The output of the ALU is mapped as such:
-io_led[0] : output of ALU
-io_led[1] : diagnostic output of ALU, consisting of (0 -> overflow, 1 -> a == b)

We realised that division a/b can be done, by considering a growing array in a and comparing that to b. This can be implemented with a for loop.

Upon testing, we realised that we cannot do an arithmetic assignment in code (eg a = a + 1). As such, we use flip-flops to store the bits of the result.

Day 3:
-We realised that the implementation of division is unnecessary, given the "/" operator
-Upon testing, we realised that the initial method of adding and subtracting (by using the + and - of lucid functionality) is inadequate. We reverted back to using the adder as described in lab3.



